import { Selection } from "d3-selection";
import type { Schema, Position, Kinds, GetInputs, GetOutputs, EditorState, Target, Source, Focus, Node } from "./state.js";
import type { CanvasContext } from "./context.js";
export declare const nodeWidth = 156;
export declare const nodeMarginX = 4;
export declare const nodeHeaderHeight = 24;
export declare const portRadius = 12;
export declare const portMargin = 12;
export declare const portHeight: number;
export declare const canvasPaddingRight = 480;
export declare function signalInvalidType(type: never): never;
export declare const initialEditorState: <S extends Schema>() => EditorState<S>;
export declare function makeClipPath<S extends Schema>(kinds: Kinds<S>, kind: keyof S): string;
export declare function place({ options }: CanvasContext, { x, y }: Position, offset?: [number, number]): [number, number];
export declare const toTranslate: ([x, y]: [number, number]) => string;
export declare function getPortOffsetY(index: number): number;
export declare const getInputIndex: <S extends Schema, K extends keyof S>(kinds: Kinds<S>, kind: K, input: GetInputs<S, K>) => number;
export declare const getOutputIndex: <S extends Schema, K extends keyof S>(kinds: Kinds<S>, kind: K, output: GetOutputs<S, K>) => number;
export declare function getInputOffset<S extends Schema, K extends keyof S>(kinds: Kinds<S>, kind: K, input: GetInputs<S, K>): [number, number];
export declare function getOutputOffset<S extends Schema, K extends keyof S>(kinds: Kinds<S>, kind: K, output: GetOutputs<S, K>): [number, number];
export declare function getSourcePosition<S extends Schema>(context: CanvasContext, kinds: Kinds<S>, { id, output }: Source<S>): [number, number];
export declare function getTargetPosition<S extends Schema>(context: CanvasContext, kinds: Kinds<S>, { id, input }: Target<S>): [number, number];
export declare function forInputs<S extends Schema, K extends keyof S>(kinds: Kinds<S>, kind: keyof S): Generator<GetInputs<S, K>>;
export declare function forOutputs<S extends Schema, K extends keyof S>(kinds: Kinds<S>, kind: keyof S): Generator<GetOutputs<S, K>>;
export declare const snap: ({ options }: CanvasContext, [x, y]: [number, number]) => Position;
export declare function makeCurvePath([x1, y1]: [number, number], [x2, y2]: [number, number]): string;
export declare function getNodeAttributes(node: Selection<SVGGElement, unknown, null, undefined>): {
    id: string;
    kind: string;
    position: Position;
};
export declare function getEdgeSource(edge: Selection<SVGGElement, unknown, null, undefined>): {
    id: string;
    output: string;
    kind: string;
};
export declare function getEdgeTarget(edge: Selection<SVGGElement, unknown, null, undefined>): {
    id: string;
    input: string;
    kind: string;
};
export declare function isFocusEqual(a: Focus | null, b: Focus | null): boolean;
export declare function getCanvasWidth<S extends Schema>({ options }: CanvasContext, nodes: Record<string, Node<S>>): number;
